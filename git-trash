#!/bin/sh

GIT_DIR="$(git rev-parse --git-dir)"
GIT_TRASH=
GIT_TRASH_DEFAULT="$GIT_DIR/.GIT_TRASH"

trap 'rm -f "$GIT_TRASH"' 0

function err {
    echo "$1" 1>&2
}

function die {
    err "$1"
    exit 1
}

function stash_size {
    echo $(git stash list | wc -l)
}

function trash_commits {
    test -z "$GIT_TRASH" &&
    GIT_TRASH="$GIT_TRASH_DEFAULT" &&
    git fsck --no-progress --unreachable | \
	awk '/commit/ {print $3}' | \
	git log --stdin --no-walk --format='%H' --grep="^TRASH" | \
	sed "/$(git rev-parse HEAD)/ d" > "$GIT_TRASH"
}

function trash_list {
    trash_commits
    test -s "$GIT_TRASH" &&
    git log --stdin --no-walk --format='%h %s' < "$GIT_TRASH" | \
	awk '{print "trash{"i++"}: " $0}'
}

function trash_parse {
    index=$(echo "$1" | sed -n 's/^\(trash\)?{\([0-9][0-9]*\)}/\2/p')
    test -n $index &&
    trash_commits &&
    awk "NR==($index+1)" < "$GIT_TRASH"
}

function trash_apply {
    index=$(trash_parse "$1")
    test -n $index &&
    git stash apply $index
}

set -e

test $# -eq 0 && set "save" "$@"

case "$1" in
    list)
	shift
	trash_list "$@"
	exit 0
	;;
    apply)
	shift
	trash_apply "$@"
	exit 0
	;;
    save)
	shift
	# fallthrough
	;;
    *)
	die "Invalid command!"
	;;
esac
    
# remember stash size before
before=$(stash_size)

# try to stash
args=$(git rev-parse --sq-quote "$@")
command="git stash save $args"
eval "$command" >/dev/null || die "Failed to stash!"

# remember stash size after
after=$(stash_size)

# stash size didn't change, nothing to trash
test $after -eq $before && die "No local changes to trash!"

# remember stash
stash=$(git rev-parse refs/stash)

# drop stash
git stash drop &>/dev/null

# detect stash's tree
tree=$(git cat-file -p $stash | awk '/^tree/ {print $2; exit}')

# detect stash's parents
declare -a parents=($(git cat-file -p $stash | awk '/^parent/ {print $2}'))

# create a new trash commit, use stash's message & parents
trash=$(git log --no-walk --format=%B $stash | sed -n '
1 {
    s/^WIP on/TRASH on/
    s/^On/TRASH on/
    p
}
1 ! {
    p
}' | git commit-tree -p ${parents[0]} -p ${parents[1]} -F - $tree)

(test -z $trash || test "$(git cat-file -t $trash)" !=  "commit") && \
    err "Failed to trash!" && \
    git stash apply $stash

echo "\
Trashed working directory and index state $(git log --no-walk --format=%s $trash).
HEAD is now at $(git log --no-walk --format='%h %s' HEAD)"

