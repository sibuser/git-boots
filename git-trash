#!/bin/bash
# Copyright (c) 2012, Alexander Krasnukhin <the.malkolm@gmail.com>
#
# TODO trash_save is too complex, dig stash commits instead
# TODO better dig progress output (add subject?)
# TODO trash_show ~ git stash show
# TODO trash_drop ~ git stash drop
# TODO trash_branch ~ git stash branch
# TODO write help & usage
# TODO filter out commits with the same tree?
#

ref_stash="refs/stash"
ref_trash="refs/heads/trash"
regex_trash="^TRASH"

err () {
    echo "$1" 1>&2
}

die () {
    err "$1"
    exit 1
}

# stash size
stash_size () {
    echo $(git stash list | wc -l)
}

# search for trash
trash_search () {
    git fsck --no-progress --unreachable | \
        awk '/commit/ {print $3}' | \
        git rev-list --reverse --stdin --no-walk --grep="$regex_trash" --not HEAD --
}

# bury trash back, does it smell?
trash_bury () {
    trash_have || return 0

    current=$(git show-ref -q --verify $ref_trash)
    git reflog expire --expire=now $ref_trash
    git update-ref -d $ref_trash $current
}

# dig for trash
trash_dig () {
    trash_search | \
        while read commit
    do
        subject="$(git log --no-walk --format='%s' $commit --)"
        git update-ref -m "$subject" $ref_trash $commit
    done
}

# check if trash exist
trash_have () {
    git show-ref -q --verify $ref_trash
}

# list recovered trash
trash_list () {
    trash_have || return 0

    git log --format="%h %gd: %gs" -g "$@" $ref_trash --
}

# apply trash commit
trash_apply () {
    git stash apply "$@"
}

# save to trash
trash_save () {
    # remember stash size before
    before=$(stash_size)

    # try to stash
    args=$(git rev-parse --sq-quote "$@")
    command="git stash save $args"
    eval "$command" >/dev/null || die "Failed to stash!"

    # remember stash size after
    after=$(stash_size)

    # stash size didn't change, nothing to trash
    test $after -eq $before && die "No local changes to trash!"

    # remember stash
    stash=$(git rev-parse $ref_stash)

    # drop stash
    git stash drop &>/dev/null

    # detect stash's tree
    tree=$(git cat-file -p $stash | awk '/^tree/ {print $2; exit}')

    # detect stash's parents
    declare -a parents=($(git cat-file -p $stash | awk '/^parent/ {print $2}'))

    # create a new trash commit, use stash's message & parents
    trash=$(git log --no-walk --format=%B $stash -- | sed -n '
1 {
    s/^WIP on/TRASH on/
    s/^On/TRASH on/
    p
}
1 ! {
    p
}' | git commit-tree -p ${parents[0]} -p ${parents[1]} $tree)

    (test -z $trash || test "$(git cat-file -t $trash)" !=  "commit") && \
        err "Failed to trash!" && \
        git stash apply $stash

    echo "\
Trashed working directory and index state $(git log --no-walk --format=%s $trash -- ).
HEAD is now at $(git log --no-walk --format='%h %s' HEAD -- )"
}

set -e

test $# -eq 0 && set "save" "$@"

case "$1" in
    search)
        shift
        trash_search "$@"
        ;;
    dig)
        shift
        trash_dig "$@"
        ;;
    clean|bury)
        shift
        trash_bury "$@"
        ;;
    list)
        shift
        trash_list "$@"
        ;;
    apply)
        shift
        trash_apply "$@"
        ;;
    save)
        shift
        trash_save "$@"
        ;;
    *)
        die "Invalid command!"
        ;;
esac
