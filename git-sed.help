#!/bin/bash
# Copyright (c) 2012, Alexander Krasnukhin <the.malkolm@gmail.com>

OPTIONS_SPEC="\
$(basename $0) [options] <sed-script> -
$(basename $0) [options] <sed-script> <rev-list options>...
--
 Available options are
h,help            show help
f,force           pass --force to git-filter-branch
n,quiet           pass --quiet to sed
"

SUBDIRECTORY_OK=yes
USAGE=
LONG_USAGE="\
DESCRIPTION

Lets you rewrite git revision history by rewriting the branches mentioned in the
<rev-list options>, applying predefined message filter based on sed script.

<sed-script> is passed as-is to sed so for example there is no need to quote
simple scripts i.e. both these variants will work:

    \$ git sed 's/foo/bar/' master..topic
    \$ git sed s/foo/bar/ master..topic

But be carefull about any mini scripts with special symbols. But if you are
using sed you probably know what I'm talking about.

For more information about <rev-list options> check git-filter-branch as it will
be passed as-is to git-filter-branch except the case when it's empty or equal
to '-'.

If <rev-list options> is empty than nothing happens. This is something counter
to the git-filter-branch original behaviour. The only reason is to protect
user from accidently rewriting *whole* history. If you really want it - use
git-filter-branch directly.

If <rev-list options> is equal to '-' than an attempt to read from stdin is
made. All lines will be concatenated and the result line will be used as a
paramter to invocation e.g. the following commands do exactly the same:

    \$ git sed 's/foo/bar/'
    \$ echo '' | git sed 's/foo/bar/' -

    \$ git sed 's/foo/bar/' HEAD~10..HEAD
    \$ echo 'HEAD~10..HEAD' | git sed 's/foo/bar/' -

    \$ git sed 's/foo/bar/' HEAD~20..HEAD~10
    \$ git sed -f 's/foo/bar/' HEAD~5..HEAD
    \$ echo -e 'HEAD~20..HEAD~10  HEAD~5..HEAD' | git sed -f 's/foo/bar/' -
    \$ echo -e 'HEAD~20..HEAD~10\nHEAD~5..HEAD' | git sed -f 's/foo/bar/' -

BACKUP

Before any history rewrite git creates backup. If you try to rewrite
topic history it will create backup reference:

    refs/original/refs/heads/topic

If you are not satisfied with the result you can always reset your
changes:

    \$ git checkout topic
    \$ git reset --hard refs/original/refs/heads/topic

If you wish you can always manually delete backup:

    \$ git update-ref -d refs/original/refs/heads/topic

Don't ever manually delete backup refs from .git using 'rm' command even if
somebody in the Internet says so - always use git-update-ref!

EXAMPLES

Replace 'foo' with 'bar'

    \$ $(basename $0) 's/foo/bar/' master..topic

Replace 'foo' with 'bar', ignore backup

    \$ $(basename $0) -f 's/foo/bar/' master..topic
"

