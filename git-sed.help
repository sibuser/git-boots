#!/bin/bash
# Copyright (c) 2012, Alexander Krasnukhin <the.malkolm@gmail.com>

OPTIONS_SPEC=$(cat << EOF
$(basename $0) [options] <sed-script> <rev-list options>...
--
 Available options are
h,help            show help
f,force           pass --force to git-filter-branch
n,quiet           pass --quiet to sed
EOF
)

SUBDIRECTORY_OK=yes
USAGE=
LONG_USAGE=$(cat <<EOF
DESCRIPTION

Lets you rewrite git revision history by rewriting the branches mentioned in the
<rev-list options>, applying predefined message filter based on sed script.

For more information about <rev-list options> check git-filter-branch as it will
be passed as-is to git-filter-branch.

BACKUP

Before any history rewrite git creates backup. If you try to rewrite
topic history it will create backup reference:

        refs/original/refs/heads/topic

If you are not satisfied with the result you can always reset your
changes:

        \$ git checkout topic
        \$ git reset --hard refs/original/refs/heads/topic

If you wish you can always manually delete backup:

        \$ git update-ref -d refs/original/refs/heads/topic

Don't ever manually delete backup refs from .git using 'rm' command even if
somebody in the Internet says so - always use git-update-ref!

EXAMPLES

    Replace 'foo' with 'bar'

        \$ $(basename $0) 's/foo/bar/' master..topic

    Replace 'foo' with 'bar', ignore backup

        \$ $(basename $0) -f 's/foo/bar/' master..topic
EOF
)
