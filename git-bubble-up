#!/bin/bash
# Copyright (c) 2012, Alexander Krasnukhin <the.malkolm@gmail.com>
#
# TODO git-bubble-up --prune master topic/* # prune branches that ff'ed
#

. "$(git boots --sh-setup)"

while getopts "v" flag; do
    case $flag in
        v)
            verbose="$verbose --verbose"
            ;;
        :|\?)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

orig_branch="$(boots_current_branch)"
say "Your current branch is '$orig_branch'"

boots_require_clean_work_tree
boots_require_non_detached_head

case $# in
    1)
        master="$1"
        branches="$(boots_current_branch)"
        ;;
    2)
        master="$1"
        branches="$(boots_find_branches $2)"
        ;;
    *)
        usage
        ;;
esac

boots_require_branch "$master" "Invalid <master> branch name."
boots_require_branches "$branches" "Invalid <branches> branches' names."

boots_require_upstream "$master" "<master> doesn't have upstream branch set."

upstream_remote="$(git config --get branch.$master.remote)"
upstream_branch_ref="$(git config --get branch.$master.merge)"
upstream_branch="${upstream_branch_ref//refs\/heads\//}"

set -e

say "Fetching new changes from '$upstream_remote' '$upstream_branch_ref'..."
git fetch $verbose $upstream_remote \
    $upstream_branch_ref:refs/remotes/$upstream_remote/$upstream_branch

boots_require_can_ff refs/remotes/$upstream_remote/$upstream_branch $master "
Your local $master has local not yet pushed commits."

say "Rebasing '$master' on '$upstream_remote/$upstream_branch'..."
git rebase $verbose \
    refs/remotes/$upstream_remote/$upstream_branch \
    $master

for branch in $branches
do
    say "Rebasing '$branch' on '$master'..."
    git rebase $verbose \
        $master \
        $branch
done

if test "$orig_branch" != "$branches"
then
    say "Rolling back to the original branch '$orig_branch'..."
    git checkout -q $orig_branch --
fi
