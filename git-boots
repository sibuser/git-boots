#!/bin/bash
# Copyright (c) 2012, Alexander Krasnukhin <the.malkolm@gmail.com>

test "$1" != "--sh-setup" &&
. "$(git boots --sh-setup)"

GIT_ALIASES="\
append          commit --amend -C HEAD
last            log -n 1
index           diff --cached
incoming        log ...@{u}
outgoing        log @{u}...
new             !sh -c 'git log \$1@{1}..\$1@{0} "\$@"'
empty-tree-sha1 hash-object -t tree /dev/null
stash-unapply   git stash show -p | git apply -R"

template () {
cat << EOF
#!/bin/bash
# $GIT_COPYRIGHT

. "\$(git boots --sh-setup)"

set -e

# a  - simple
# b: - with arg (\$OPTARG)
while getopts "" flag; do
  case \$flag in
    :|\?)
      usage
     ;;
  esac
done
shift \$((OPTIND - 1))
EOF
}

template_help () {
cat << EOS
#!/bin/bash

OPTIONS_SPEC="\\
\$(basename \$0) [options]
--
 Available options are
h,help           show help
"

SUBDIRECTORY_OK=yes
USAGE=
LONG_USAGE=
EOS
}

boots_dir () {
    test -z $BOOTS_DIR && BOOTS_DIR="$(dirname $(which git-boots))"
    echo "$BOOTS_DIR"
}

sh_setup () {
    echo "$(boots_dir)/git-boots-setup"
}

aliases_setup () {
    echo "$GIT_ALIASES" | \
        sed '/^[ \t]*(#|$)/ d' | \
        while read line;
    do
        alias="$(echo "$line"   | awk '{print $1}')"
        command="$(echo "$line" | awk '{$1="";print}')"
        if git config --get alias."$alias" >/dev/null
        then
            err "git-$alias is already set, skip"
            continue
        fi
        git config "$@" alias."$alias" "${command## }"
        say "git-$alias is set"
    done
}

# TODO check about rerere, it should be enabled too
env_check () {
    git config --get user.name  >/dev/null || die "Please set user.name: git config --global user.name \"John Doe\""
    git config --get user.email >/dev/null || die "Please set user.email: git config --global user.email john.doe@site.com"
}

clean () {
    sed -i 's/\t/    /g' "$@"
    sed -i 's/[ \t]*$//g' "$@"
}

copyright () {
    sed -i -n "
1 {
# read extra line
    N
# check Copyright present
    s:Copyright:&:
# skip if so
    t skip
# print header
    P
# insert missing copyright
    i\
# $GIT_COPYRIGHT
# delete header & next cycle
    D
    :skip
# print header & delete it
    P;D
}
1 ! {
    p
}
" "$@"
}

# TODO add todo to the custom file
boots_todo() {
    # from scripts
    awk '/TODO/ && !/awk/ {printf "%-12s : %s\n", FILENAME, $0}' $(ls "$(git boots --dir)")
    # from TODO
    cat $(git boots --dir)/TODO |
    awk '                 {printf "%-12s : %s\n", "TODO"  , $0}'
}

case "$1" in
    --env-check)
        shift
        env_check "$@"
        ;;
    --sh-setup)
        shift
        sh_setup "$@"
        ;;
    --aliases-setup)
        shift
        aliases_setup "$@"
        ;;
    --clean)
        shift
        clean "$@"
        ;;
    --copyright)
        shift
        copyright "$@"
        ;;
    --template)
        shift
        template "$@"
        ;;
    --template-help)
        shift
        template_help "$@"
        ;;
    --dir)
        shift
        boots_dir "$@"
        ;;
    --todo)
        shift
        boots_todo "$@"
        ;;
    *)
        usage
        ;;
esac
