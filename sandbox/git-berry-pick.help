#!/bin/bash

OPTIONS_SPEC="
$(basename $0) [options] <commit>...
--
 Available options are
h,help           show help
n,no-commit      don't automatically commit, only run script
p,print          don't run script, only print
e,edit           edit the commit message
"

SUBDIRECTORY_OK=yes
USAGE=
LONG_USAGE="\
DESCRIPTION

Given one or more existing commits, extract embedded scripts and replay all
these scripts, recording a new commit for each. This required your working tree
to be clean (no modifications from the HEAD commit).

The script is embedded using '\#!/bin/bash' and spans until the next empty line
or end of the commit body:

$ git show HEAD
commit 6d09b591ecf6e6d2ecd6b7302df3fb0c71666977
Author: Alexander Krasnukhin <the.malkolm@gmail.com>
Date:   Sat May 18 20:25:22 2013 +0200

    This is subject of commit message.

    After the first empty line goes body of message. You can type usuall stuff here.
    Script will start after '\#!/bin/bash' is written and will span until the next
    empty line.

    This one will replace all 'foo' with 'bar' in all headers in the probject. It
    will use git-grep to boost performance:

    \#!/bin/bash -e
    git grep -l 'foo' | \\
      grep '\.h$' | \\
      xargs sed -i 's/foo/bar/g'
    : # colon is noop in bash

    The previous empty line signals end of the script to $(basename $0). You can
    treat it as EOF of script. After this empty line everything is ignored by
    $(basename $0).

    If you want to have some kind of empty line within a script than you can use
    ':' for bash etc.

EXAMPLES

Berry pick commit with given sha on top of current HEAD

  \$ $(basename $0) <sha>^!

Berry pick commits on top of current HEAD

  \$ $(basename $0) <sha1>..<sha2>
"
