#!/bin/bash
# Copyright (c) 2013, Alexander Krasnukhin <the.malkolm@gmail.com>
#
# TODO add --cherry-pick option to cherry-pick commit first & than try to
#      berry pick it with follow up commit.
# TODO add validator (separate script?) that will validate that bunch
#      of commits with scripts contain only stuff modified by script
# TODO should berry pick really commit? pros vs cons
#

. "$(git boots --sh-setup)"

set -e

# a  - simple
# b: - with arg ($OPTARG)
while getopts "npef" flag; do
  case $flag in
    f)
      opt_force="t"
      opt_no_commit="t"
      ;;
    n)
      opt_no_commit="t"
      ;;
    p)
      opt_print="t"
      ;;
    e)
      opt_edit_msg="t"
      ;;
    :|\?)
      usage
      ;;
  esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
  usage
fi

rev_list="$@"
boots_require_valid_rev_list $rev_list
boots_require_no_merges $rev_list

extract_script() {
  git log --format=%B ${@}^! |
  sed -n '
/\\#!/,/^$/ p # from escaped dash-bang to the next empty line
' |
  sed '
s:\\#!:#!:    # make a valid dash-bang
/^$/ d        # remove empty lines
'
}

msg_prepare() {
  git_dir=$(git rev-parse --git-dir)
  git log --format=%B $1^! > "$git_dir"/COMMIT_EDITMSG
  echo "$git_dir"/COMMIT_EDITMSG
}

msg_done() {
  git_dir=$(git rev-parse --dir-dir)
  mv "$git_dir"/$1 "$git_dir"/COMMIT_MSG
}

try_commit() {
  commit=$1
  msg=$2
  if test $(git ls-files -m -d | wc -l) -gt 0; then
    git commit -a -F $msg || die "Failed to commit berry picked changes"
    say "Successfully berry picked $commit"
  else
    say "Berry picking didn't introduce any changes"
  fi
}

run_script() {
  if test -z "$opt_force"; then
    boots_require_clean_work_tree
  fi
  commit=$1
  say "Berry pick $commit"
  script=$(extract_script $commit)
  if test -n "$script"; then
    say "Found script in $commit"
    say "---"
    say "$script"
    say "---"
    tmp=$(boots_temp_file $$)
    echo "$script" > $tmp
    chmod u+x $tmp
    $tmp || die "Failed to run script from $commit"
  else
    say "Can't find a script in $commit"
  fi
}

update_submodules() {
  commit=$1
  say "Updating submodules for $1"
  git submodule update --recursive
}

cdup=$(git rev-parse --show-cdup)
test -n "$cdup" && cd $cdup

for commit in $(git rev-list --reverse $@); do
  if test -n "$opt_print"; then
    echo $commit
    echo "$(extract_script $commit)"
    echo ""
    continue
  fi

  run_script $commit

  if test -n "$opt_no_commit"; then
    msg_done "$(msg_prepare $commit)"
    say "Successfully berry picked (no-commit) $commit"
    exit 0;
  fi

  msg=$(msg_prepare $commit)
  if test -n "$opt_edit_msg"; then
    git_editor $msg
  fi
  msg_done "$msg"

  try_commit $commit $msg
done


