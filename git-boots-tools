#!/bin/bash
# Copyright (c) 2012, Alexander Krasnukhin <the.malkolm@gmail.com>

no_flags () {
    while getopts "" flag; do
        case $flag in
            :|\?)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))
    echo "$@"
}

boots_stash_size () {
    echo $(git stash list | wc -l)
}

boots_current_branch () {
    ref="$(git symbolic-ref -q --short HEAD)"
    echo "${ref:-HEAD}"
}

boots_is_detached_head () {
    test "$(boots_current_branch)" = "HEAD"
}

boots_require_non_detached_head () {
    (! boots_is_detached_head) || die "\
You are in 'detached HEAD' state. Please get out of it e.g. you can do it by checking out any branch."
}

boots_require_clean_work_tree () {
    require_clean_work_tree "execute $(basename $0)" "Commit or stash your changes and try again."
}

boots_require_branch () {
    test -z $1 && die "Empty argument"
    ref="refs/heads/${1//refs\/heads\//}"
    git show-ref -q --verify -- "$ref" || die "$1 is not a valid branch. $2"
}

boots_require_upstream () {
    boots_require_branch "$1"
    (git config --get branch."$1".remote >/dev/null &&
        git config --get branch."$1".merge >/dev/null) || die "$1 doesn't have proper upstream set. $2"
}

boots_require_can_ff () {
    count=$(git cherry $1 $2 | awk '/\+/' | wc -l)
    test "$count" = "0" || die "Can't fast-forward from $1 to $2. $3"
}

boots_require_git_version () {
    test "$(git --version)" = "git version $1" || die "Update your git to $1.
Here is how you can do it:

(sudo apt-get install libcurl4-dev libexpat-dev)

$ git clone git://github.com/git/git.git ~/git
$ cd ~/git
$ git checkout v1.8.0
$ make prefix=/usr/local all
$ sudo make prefix=/usr/local install

(sudo apt-get install asciidoc xmlto xmltoman)

$ make prefix=/usr/local doc
$ sudo make prefix=/usr/local install-doc"
}