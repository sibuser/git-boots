#!/bin/bash
# Copyright (c) 2012, Alexander Krasnukhin <the.malkolm@gmail.com>

trap boots_cleanup EXIT

boots_cleanup () {
  rm -f "$GIT_DIR"/.git-boots.tmp.*
}

boots_temp_file () {
  echo "$GIT_DIR/.git-boots.tmp.$@"
}

no_flags () {
    while getopts "" flag; do
        case $flag in
            :|\?)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))
    echo "$@"
}

boots_require_non_unique_ref () {
    (git show-ref --hash | uniq -c -d | grep -q $(git rev-parse "$1")) ||
        die "Provided reference '$1' is unique!"
}

boots_require_no_merges () {
    test $(git rev-list --count --min-parents=2 $@) -eq 0 ||
        die "You have merges in your rev-list options. No can do."
}

boots_stash_size () {
    echo $(git stash list | wc -l)
}

boots_find_branches () {
    if boots_is_branch "$@"
    then
        echo "$@"
    else
        for regex in "$@"
        do
            git rev-parse --symbolic-full-name --branches="$regex"
        done | sed s:refs/heads/::g
    fi
}

boots_current_branch () {
    ref="$(git symbolic-ref -q --short HEAD)"
    echo "${ref:-HEAD}"
}

boots_is_detached_head () {
    test "$(boots_current_branch)" = "HEAD"
}

boots_require_non_detached_head () {
    (! boots_is_detached_head) || die "\
You are in 'detached HEAD' state. Please get out of it e.g. you can do it by checking out any branch."
}

boots_require_clean_work_tree () {
    require_clean_work_tree "execute $(basename $0)" "Commit or stash your changes and try again."
}

boots_require_commit () {
    test -z "$1" && die "Empty argument"
    (
        test $(git cat-file -e "$1") 2>/dev/null
        test $(git cat-file -t "$1") == "commit"
    ) || die "Not a commit: $1"

    # sha1="$(git rev-parse $1)"
    # (
    #     test $(echo "$sha1" | wc -l) -eq 1
    #     test $(git cat-file -e "$sha1") 2>/dev/null
    #     test $(git cat-file -t "$sha1") == "commit"
    # ) || die "Not a commit: $1"
}

boots_is_branch () {
    test -z $1 && die "Empty argument"
    ref="refs/heads/${1//refs\/heads\//}"
    git show-ref -q --verify -- "$ref"
}

boots_require_branch () {
    boots_is_branch "$1" || die "$1 is not a valid branch."
}

boots_require_branches () {
    test $# -eq 0 && die "No arguments"
    for br in ${@:1:$(($#-1))}
    do
        boots_require_branch "$br"
    done
}

boots_require_upstream () {
    boots_require_branch "$1"
    (git config --get branch."$1".remote >/dev/null &&
        git config --get branch."$1".merge >/dev/null) || die "$1 doesn't have proper upstream set. $2"
}

boots_require_can_ff () {
    count=$(git cherry $1 $2 | grep -c '^\+')
    test "$count" = "0" || die "Can't fast-forward from $1 to $2. $3"
}

boots_require_valid_rev_list () {
  git rev-parse $@ &>/dev/null ||
    die "ambiguous or invalid rev-list options: '$rev_args'"
}

boots_require_git_version () {
    test "$(git --version)" = "git version $1" || die "Update your git to $1.
Here is how you can do it:

(sudo apt-get install libcurl4-dev libexpat-dev)

$ git clone git://github.com/git/git.git ~/git
$ cd ~/git
$ git checkout v$1
$ make prefix=/usr/local all
$ sudo make prefix=/usr/local install

(sudo apt-get install asciidoc xmlto xmltoman)

$ make prefix=/usr/local doc
$ sudo make prefix=/usr/local install-doc"
}
